pipeline {
    agent any
    environment {
        COMMIT = "${GIT_COMMIT.substring(0,7)}"
        BRANCH = "${BRANCH_NAME.toLowerCase().trim().split("/")[0]}"
        JOB = "${JOB_NAME.split("/")[0].toLowerCase().trim()}"
        REPO_NAME = sh(returnStdout: true, script: 'git config --get remote.origin.url | rev | cut -f 1 -d "/" | rev | sed "s/.git//gi";sed "/^ *$/d"').toLowerCase().trim()
        SLACK_CHANNEL = '#project-dev-jenkins'
        AUTHOR = sh(returnStdout: true, script : 'git --no-pager show -s --pretty="format: %an"')
        DIR_PATH = "/data/custom/projectdev-base-2.7/minio/onpremise-tar-files"
        TAG_EXIST=sh(script: "git tag | grep ${BRANCH}" , returnStatus: true)
    }
    stages {
        stage ('start') {
            steps {
                slackSend (channel: env.SLACK_CHANNEL, color: '#FFFF00', message: "STARTED: Job '${env.JOB}-${env.BRANCH_NAME} [${env.BUILD_NUMBER}]' \n AUTHOR: ${env.AUTHOR} \n Build URL: ${env.BUILD_URL}")
            }
        }
        stage('default build'){
            when{
                expression {
                    return TAG_EXIST != "0"
                }
            }
            steps {
                sh 'docker build --no-cache -t ${BRANCH}:${JOB} -f docker/Dockerfile .'
                }
            }
        stage('RELEASE'){
            when{
                expression {
                    return TAG_EXIST == "0"
                }
            }
            environment {
                STAGE_VALUE = "RELEASE"
                TAG = "${env.BRANCH_NAME.toLowerCase().split("/")[1]}"
                DOCKER_SAVE_DIR_EXIST =sh(script: "find ${DIR_PATH}/${STAGE_VALUE}/${JOB}/${BRANCH}/${TAG}/", returnStatus: true)
            }
            steps {
                sh 'docker build --no-cache -t ${BRANCH}:${JOB} -f docker/Dockerfile .'
                sh 'docker tag ${BRANCH}:${JOB} ${BRANCH}'
                script{
                    if (env.DOCKER_SAVE_DIR_EXIST == '0'){
                        sh 'docker save -o ${DIR_PATH}/${STAGE_VALUE}/${JOB}/${BRANCH}/${TAG}/${BRANCH}.tar ${BRANCH}'
                        echo "docker save success. "
                    }else{
                        echo " 디렉토리를 찾을 수 없습니다. "
                        sh 'mkdir -p ${DIR_PATH}/${STAGE_VALUE}/${JOB}/${BRANCH}/${TAG}/'
                        sh 'docker save -o ${DIR_PATH}/${STAGE_VALUE}/${JOB}/${BRANCH}/${TAG}/${BRANCH}.tar ${BRANCH}'
                        echo "docker save success. "
                    }
                }
            }
            post {
                success{
                    slackSend (channel: env.SLACK_CHANNEL, color: '#00FF00', message: "Docker Build Successful \n tar -  https://192.168.0.9:9000/onpremise-tar-files/${env.STAGE_VALUE}/${env.JOB}/${env.BRANCH}/${env.TAG}/${env.BRANCH}.tar" )
                }
            }
        }
        stage('Deploy'){
            steps {
                sh 'docker ps -f name=${JOB}-${BRANCH} -q  || true  docker stop ${JOB}-${BRANCH}'
                sh 'docker container ls -a -f name=${JOB}-${BRANCH} -q || true  docker-compose -f /usr/local/custom/${REPO_NAME}/docker-compose.yaml rm -f ${JOB}-${BRANCH}'
                sh 'docker-compose -f /usr/local/custom/${REPO_NAME}/docker-compose.yaml up -d ${BRANCH}'
            }
        }
    }
    post {
        success {
            slackSend (channel: env.SLACK_CHANNEL, color: '#00FF00', message: "SUCCESSFUL: ${env.JOB}-${env.BRANCH_NAME} [${env.BUILD_NUMBER}]\n AUTHOR: ${env.AUTHOR}  \n Build URL: - ${env.BUILD_URL} " )
        }
        failure {
            slackSend (channel: env.SLACK_CHANNEL, color: '#FF0000', message: "FAILED: Job  ${env.JOB}-${env.BRANCH_NAME} [${env.BUILD_NUMBER}]\n AUTHOR: ${env.AUTHOR} \n Build URL: (${env.BUILD_URL})")
        }
    }
}