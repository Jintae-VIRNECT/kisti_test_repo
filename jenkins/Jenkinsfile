def COTURN_BUILD_CHECK = { 
    sh(script :'docker build -t ${BRANCH_NAME}:${JOB_NAME} -f docker/Dockerfile .' ,
    returnStatus : true)
}

pipeline {
    agent any
    environment {
        COMMIT = "${GIT_COMMIT.substring(0,7)}"
        BRANCH_NAME = "${BRANCH_NAME.toLowerCase().trim().split("/")[0]}"
        JOB_NAME = "${JOB_NAME.split("/")[0].toLowerCase().trim()}"
        REPO_NAME = sh(returnStdout: true, script: 'git config --get remote.origin.url | rev | cut -f 1 -d "/" | rev | sed "s/.git//gi";sed "/^ *$/d"').toLowerCase().trim() 
        SLACK_CHANNEL = '#project-dev-jenkins'
        AUTHOR = sh(returnStdout: true, script : 'git --no-pager show -s --pretty="format: %an"')
        RELATED_TO_PJTDEV= sh( script : 'git --no-pager show  -s --format=%B | head -1 | grep -i PJTDEV ', returnStatus: true)
        RELATED_TO_SOLUTION= sh( script : 'git --no-pager show -s --format=%B | head -1 | grep -i SOLUTION ', returnStatus: true)
        DIR_PATH = "/data/custom/projectdev-base-2.7/minio/onpremise-tar-files"
        TICKET = sh(returnStdout:true, script: ' git --no-pager show -s  --pretty="format: %B" | head -1 | cut -f 2 -d : |cut -c 1-12').trim()
        TAG_EXIST=sh(script: "git tag | grep ${BRANCH_NAME}" , returnStatus: true)
    }
    stages {
        stage ('start') {
            steps {
                echo "TICKET ::: " + env.TICKET
                echo "RELATED_TO_PJTDEV :::" + env.RELATED_TO_PJTDEV
                slackSend (channel: env.SLACK_CHANNEL, color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME}-${env.BRANCH_NAME} [${env.BUILD_NUMBER}]' \n AUTHOR: ${env.AUTHOR} \n Build URL: ${env.BUILD_URL}")
            }
        }
        stage('PJTDEV'){
            when{
                expression {    
                    return RELATED_TO_PJTDEV == "0" 
                }
            }
            environment {
                STAGE_VALUE = "PJTDEV"
                DOCKER_SAVE_DIR_EXIST =sh(script: "find ${DIR_PATH}/${STAGE_VALUE}/${JOB_NAME}/${BRANCH_NAME}/${TICKET}/", returnStatus: true)
            }
            steps {
                script{
                    if (COTURN_BUILD_CHECK!= '0'){
                        sh 'docker tag ${BRANCH_NAME}:base-2.7 ${BRANCH_NAME}:${JOB_NAME}'
                    }   
                    if (env.DOCKER_SAVE_DIR_EXIST == '0'){ 
                        sh 'docker save -o ${DIR_PATH}/${STAGE_VALUE}/${JOB_NAME}/${BRANCH_NAME}/${TICKET}/${BRANCH_NAME}.tar ${BRANCH_NAME}:${JOB_NAME}'
                        echo "docker save success. "
                    }else{
                        echo " 디렉토리를 찾을 수 없습니다. "
                        sh 'mkdir -p ${DIR_PATH}/${STAGE_VALUE}/${JOB_NAME}/${BRANCH_NAME}/${TICKET}/'
                        sh 'docker save -o ${DIR_PATH}/${STAGE_VALUE}/${JOB_NAME}/${BRANCH_NAME}/${TICKET}/${BRANCH_NAME}.tar ${BRANCH_NAME}:${JOB_NAME}'
                    }
                }
            }
        }
        stage ('SOLUTION'){
            when {
                expression {    
                    return RELATED_TO_SOLUTION == "0" && TICKET != "9"
              }
            }
             environment {
                STAGE_VALUE = "SOLUTION"
                DOCKER_SAVE_DIR_EXIST =sh(script: "find ${DIR_PATH}/${JOB_NAME}/${TICKET}/${BRANCH_NAME}", returnStatus: true)   
             }
            steps{
                script{
                    if (COTURN_BUILD_CHECK!= '0'){
                        sh 'docker tag ${BRANCH_NAME}:base-2.7 ${BRANCH_NAME}:${JOB_NAME}'
                    }
                    if (env.DOCKER_SAVE_DIR_EXIST == '0'){
                       
                        sh 'docker save -o ${DIR_PATH}/${STAGE_VALUE}/${JOB_NAME}/${TICKET}/${BRANCH_NAME}.tar ${BRANCH_NAME}:${JOB_NAME}'
                        echo "docker save success. "
                    }else{
                        echo " 디렉토리를 찾을 수 없습니다. "
                        sh 'mkdir -p ${DIR_PATH}/${STAGE_VALUE}/${JOB_NAME}/${TICKET}/'
                        sh 'docker save -o ${DIR_PATH}/${STAGE_VALUE}/${JOB_NAME}/${TICKET}/${BRANCH_NAME}.tar ${BRANCH_NAME}:${JOB_NAME}'
                    }
                }             
            }
            post{
                success{
                     slackSend (channel: env.SLACK_CHANNEL, color: '#00FF00', message: "Docker Build Successful \n tar -  https://192.168.0.9:9000/minio/onpremise-tar-files/${env.STAGE_VALUE}/${env.JOB_NAME}/${env.TICKET}/${env.BRANCH_NAME}.tar " )
                }
            }
        }
        stage('RELEASE'){
            when{
                expression {    
                    return TAG_EXIST == "0" 
                }
            }
            environment {
                STAGE_VALUE = "RELEASE"
                TAG = sh(returnStdout: true, script:'git describe --tags --abbrev=0 | grep ${BRANCH_NAME} | sed "s/${BRANCH_NAME}//gi"').trim()
                DOCKER_SAVE_DIR_EXIST =sh(script: "find ${DIR_PATH}/${STAGE_VALUE}/${JOB_NAME}/${BRANCH_NAME}/${TAG}/", returnStatus: true)
            }
            steps {
                script{
                    if (COTURN_BUILD_CHECK!= '0'){
                        sh 'docker tag ${BRANCH_NAME}:base-2.7 ${BRANCH_NAME}:${JOB_NAME}'
                    }

                    if (env.TAG_EXIST){
                        if (env.DOCKER_SAVE_DIR_EXIST == '0'){ 
                            sh 'docker save -o ${DIR_PATH}/${STAGE_VALUE}/${JOB_NAME}/${BRANCH_NAME}/${TAG}/${BRANCH_NAME}.tar ${BRANCH_NAME}:${JOB_NAME}'
                            echo "docker save success. "
                        }else{
                            echo " 디렉토리를 찾을 수 없습니다. "
                            sh 'mkdir -p ${DIR_PATH}/${STAGE_VALUE}/${JOB_NAME}/${BRANCH_NAME}/${TAG}/'
                            sh 'docker save -o ${DIR_PATH}/${STAGE_VALUE}/${JOB_NAME}/${BRANCH_NAME}/${TAG}/${BRANCH_NAME}.tar ${BRANCH_NAME}:${JOB_NAME}'
                        }
                    }
                }
            }
            post {
                success{
                    slackSend (channel: env.SLACK_CHANNEL, color: 'yello', message: "Docker Build Successful \n tar -  https://192.168.0.9:9000/onpremise-tar-files/${env.STAGE_VALUE}/${env.JOB_NAME}/${env.BRANCH_NAME}/${env.TAG}/${env.BRANCH_NAME}.tar" )
                }
            }
        }
        stage('Deploy'){
            steps {
                sh 'docker ps -f name=${JOB_NAME}-${BRANCH_NAME} -q  || true  docker stop ${JOB_NAME}-${BRANCH_NAME}'
                sh 'docker container ls -a -f name=${JOB_NAME}-${BRANCH_NAME} -q || true  docker-compose -f /usr/local/custom/${REPO_NAME}/docker-compose.yaml rm -f ${JOB_NAME}-${BRANCH_NAME}'
                sh 'docker-compose -f /usr/local/custom/${REPO_NAME}/docker-compose.yaml up -d ${BRANCH_NAME}'
            }
        }
    }
    post {
        success {
            slackSend (channel: env.SLACK_CHANNEL, color: '#00FF00', message: "SUCCESSFUL: ${env.JOB_NAME}-${env.BRANCH_NAME} [${env.BUILD_NUMBER}]\n AUTHOR: ${env.AUTHOR}  \n Build URL: - ${env.BUILD_URL} " )
        }
        failure {
            slackSend (channel: env.SLACK_CHANNEL, color: '#FF0000', message: "FAILED: Job  ${env.JOB_NAME}-${env.BRANCH_NAME} [${env.BUILD_NUMBER}]\n AUTHOR: ${env.AUTHOR} \n Build URL: (${env.BUILD_URL})")
        }    
    }
}
