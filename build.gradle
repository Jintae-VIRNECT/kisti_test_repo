import com.github.jk1.license.filter.ExcludeTransitiveDependenciesFilter
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.InventoryMarkdownReportRenderer

plugins {
    id 'org.springframework.boot' version '2.3.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id "io.franzbecker.gradle-lombok" version "3.3.0"
    id "com.github.jk1.dependency-license-report" version "1.13"
    id 'java'
}

ext {
    springCloudVersion = 'Hoxton.SR10'
    mapstructVersion = '1.4.2.Final'
}


group = 'com.virnect'
version = '1.3.2'
sourceCompatibility = '1.8'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.data:spring-data-envers'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'com.h2database:h2'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.google.code.gson:gson:2.8.7'


    // Netflix Feign Client
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-config-client'

    implementation group: 'io.github.openfeign.form', name: 'feign-form', version: '3.8.0'

    // ModelMapper
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.0'

    // Query DSL
    implementation("com.querydsl:querydsl-jpa") // querydsl
    implementation("com.querydsl:querydsl-apt") // querydsl

    // Common
    implementation group: 'commons-io', name: 'commons-io', version: '2.4'

    // Apache Common Lang and Http Component
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.9'

    // JSON WEB TOKEN
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.0'

    //Swagger Libraries
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'

    // user agent parser
    implementation 'com.github.ua-parser:uap-java:1.4.3'

    // GeoIP
    implementation 'com.maxmind.geoip2:geoip2:2.13.1'


    // google authentication otp
    implementation 'com.warrenstrange:googleauth:1.4.0'

    // zxing for qr generate
    implementation 'com.google.zxing:core:3.3.0'
    implementation 'com.google.zxing:javase:3.3.0'

    // minio
    implementation 'io.minio:minio:7.1.2'

    // version string handling
    implementation 'com.vdurmont:semver4j:3.1.0'

    // monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // feign oktthp
    implementation 'io.github.openfeign:feign-okhttp'

    // JSON PARSING
    implementation 'com.google.code.gson:gson:2.8.5'

    // aws s3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.415' // AWS Storage Service


    // map struct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"

    annotationProcessor(
            "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    )

    testAnnotationProcessor(
            "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    )

}


test {
    useJUnitPlatform()
    systemProperty("spring.active.profiles", "test")
    systemProperty("VIRNECT_ENV","test")
}


// querydsl 적용
def querydslDir= "$buildDir/generated/querydsl"

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}



//License Reporting Configuration
licenseReport {
    renderers = [new InventoryMarkdownReportRenderer()]
    filters = [new LicenseBundleNormalizer(), new ExcludeTransitiveDependenciesFilter()]
}

bootJar {
    layered()
}