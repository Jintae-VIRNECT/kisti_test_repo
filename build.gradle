plugins {
    id 'org.springframework.boot' version '2.3.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id "io.franzbecker.gradle-lombok" version "3.3.0"
    id 'java'
    id 'jacoco'
}

group = 'com.virnect'
version = '1.2.29'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // ModelMapper
    implementation group: 'org.modelmapper', name:'modelmapper', version: '2.3.0'

    // Query DSL
    implementation("com.querydsl:querydsl-jpa") // querydsl
    implementation("com.querydsl:querydsl-apt") // querydsl

    // Common
    implementation group: 'commons-io', name: 'commons-io', version: '2.4'

    // Apache Common Lang
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

    // AWS
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.415' // AWS Storage Service
    implementation 'com.amazonaws:aws-java-sdk-ses:1.11.415' // AWS Simple Email Service

    // Swagger Libraries
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    // Template Engine : Tymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Netflix Feign Client
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // Netflix Eureka Client
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    // AMQP
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    // Zipkin
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'

    // Configuration
    implementation 'org.springframework.cloud:spring-cloud-config-client'

    // feign oktthp
    implementation 'io.github.openfeign:feign-okhttp'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'

    // Minio
    implementation 'io.minio:minio:7.1.4'
    runtimeOnly 'com.h2database:h2'
}

test {
    useJUnitPlatform()
    systemProperty("spring.active.profiles", "test")
    systemProperty("VIRNECT_ENV", "test")
    finalizedBy jacocoTestReport
}

// querydsl 적용
def querydslSrcDir = 'src/main/generated'

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslSrcDir]
        }
    }
}

ext {
    springCloudVersion = 'Hoxton.SR10'
    jacocoExcludes = [

    ]
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// separate jar into app and library layers
task moveLib {
    doLast {
        def unpackDir = "$buildDir/unpack"
        ant.move(file: "${unpackDir}/app/BOOT-INF/lib", toFile: "${unpackDir}/lib")
    }
}

task unpackJar(type: Copy) {
    def unpackDir = "$buildDir/unpack"

    delete unpackDir
    from zipTree(jar.getArchiveFile())
    into "$unpackDir/app"

    finalizedBy moveLib
}

build {
    finalizedBy unpackJar
}

/**
 * Jacoco Configuration
 */

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test

    reports {
        csv.enabled true
        xml.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        }))
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        }))
    }
}
