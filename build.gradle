import com.github.jk1.license.filter.ExcludeTransitiveDependenciesFilter
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.InventoryMarkdownReportRenderer

plugins {
    id 'org.springframework.boot' version '2.3.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "edu.sc.seis.launch4j" version "2.4.6"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id "io.franzbecker.gradle-lombok" version "3.3.0"
    id "com.github.jk1.dependency-license-report" version "1.13"
    id 'java'
    id 'jacoco'
}

group = 'com.virnect'
version = '1.4.0'
sourceCompatibility = '1.8'

ext {
    springCloudVersion = 'Hoxton.SR10'
    mapstructVersion = '1.4.2.Final'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // Mapstuct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.data:spring-data-envers'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    runtimeOnly 'mysql:mysql-connector-java'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // Netflix Feign Client
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // ModelMapper
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.0'
    implementation group: 'org.modelmapper.extensions', name: 'modelmapper-jackson', version: '2.3.0'

    // Query DSL
    implementation("com.querydsl:querydsl-jpa") // querydsl
    implementation("com.querydsl:querydsl-apt") // querydsl

    // Common
    implementation 'commons-io:commons-io:2.4'
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'com.google.code.gson:gson:2.8.5'


    //Swagger Libraries
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    // QR
    implementation 'com.google.zxing:core:3.4.0'
    implementation 'com.google.zxing:javase:3.4.0'

    // aws s3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.415' // AWS Storage Service

    // Zipkin
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'

    runtimeOnly 'com.h2database:h2:1.4.199'

    // monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Configuration
    implementation 'org.springframework.cloud:spring-cloud-config-client'

    // Minio
    implementation 'io.minio:minio:8.1.0'

    // feign oktthp
    implementation 'io.github.openfeign:feign-okhttp'


    // Json web token
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
}

test {
    useJUnitPlatform()
    systemProperty("spring.active.profiles", "local")
    systemProperty("VIRNECT_ENV", "local")
    finalizedBy jacocoTestReport
}


// querydsl 적용
def querydslSrcDir = 'src/main/generated'

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslSrcDir]
        }
    }
}

//License Reporting Configuration
licenseReport {
    renderers = [new InventoryMarkdownReportRenderer()]
    filters = [new LicenseBundleNormalizer(), new ExcludeTransitiveDependenciesFilter()]
}


// separate jar into app and library layers
task moveLib {
    doLast {
        def unpackDir = "$buildDir/unpack"
        ant.move(file: "${unpackDir}/app/BOOT-INF/lib", toFile: "${unpackDir}/lib")
    }
}

task unpackJar(type: Copy) {
    def unpackDir = "$buildDir/unpack"

    delete unpackDir
    from zipTree(jar.getArchiveFile())
    into "$unpackDir/app"

    finalizedBy moveLib
}

build {
    finalizedBy unpackJar
}

/**
 * Jacoco Configuration
 */

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test

    reports {
        csv.enabled true
        xml.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        }))
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        }))
    }
}